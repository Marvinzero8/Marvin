/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Chat;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.ArrayList;

/**
 *
 * @author Ralph Ian Noynay
 */
public class User_Client extends javax.swing.JFrame {

    String username, address;
    ArrayList<String> users = new ArrayList();

    Boolean isConnected = false;

    Socket theSocket;
    BufferedReader theReader;
    PrintWriter theWriter;

    public void ListenThread() {
        Thread IncomingReader = new Thread(new Message());
        IncomingReader.start();
    }

    public void userAdd(String data) {
        users.add(data);
    }

    public void userRemove(String data) {
        Message_log.append(data + " is now offline.\n");
    }

    public void writeUsers() {
        String[] tempList = new String[(users.size())];
        users.toArray(tempList);
        for (String token : tempList) {

        }
    }

    public void sendDisconnect() {
        String bye = (username + ": :Disconnect");
        try {
            theWriter.println(bye);
            theWriter.flush();
        } catch (Exception e) {
            Message_log.append("You're not connected.\n");
        }
    }

    public void Disconnect() {
        try {
            Message_log.append("Disconnected.\n");
            theSocket.close();
        } catch (Exception ex) {

        }
        isConnected = false;
       Name_c.setEditable(true);

    }
    public User_Client() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        Name_c = new javax.swing.JTextField();
        button = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Message_log = new javax.swing.JTextArea();
        mess_sent = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tw Cen MT Condensed", 1, 14)); // NOI18N
        jLabel1.setText("Username:");

        button.setFont(new java.awt.Font("Tw Cen MT Condensed", 0, 14)); // NOI18N
        button.setText("Connect");
        button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonActionPerformed(evt);
            }
        });

        Message_log.setBackground(new java.awt.Color(204, 255, 255));
        Message_log.setColumns(20);
        Message_log.setRows(5);
        jScrollPane1.setViewportView(Message_log);

        mess_sent.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                mess_sentKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                mess_sentKeyReleased(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(204, 255, 204));
        jButton2.setFont(new java.awt.Font("Tw Cen MT Condensed", 0, 14)); // NOI18N
        jButton2.setText("Send");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(mess_sent, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(6, 6, 6)
                        .addComponent(Name_c, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(button)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(Name_c, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addComponent(button)
                .addGap(9, 9, 9)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mess_sent, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonActionPerformed

      String buttontext = button.getText().toString();
        if (buttontext.equals( "Connect")) {
            
        
        address = "192.168.1.3";
        
        switch (Name_c.getText()) {
            case "":
                Name_c.setText("Input yuor name!!");
                break;
            case "Client name":
                Name_c.setText("Input yuor name!!");
                break;
            case "Input yuor name!!":
                break;
            default:
                if (isConnected == false) {
                    username = Name_c.getText();
                    Name_c.setEditable(false);
 
                    button.setText("Disconnect");
                    try {
                        theSocket = new Socket(address, 2222);
                        InputStreamReader streamreader = new InputStreamReader(theSocket.getInputStream());
                        theReader = new BufferedReader(streamreader);
                        theWriter = new PrintWriter(theSocket.getOutputStream());
                        theWriter.println(username + ": has connected :Connect");
                        theWriter.flush();
                        isConnected = true;
                        mess_sent.setEditable(true); 
                    } catch (Exception ex) {
                        Message_log.append("Cannot Connect! Try Again. \n");
                        Name_c.setEditable(true);
                        button.setText("Connect");
                    }

                    ListenThread();

                } else if (isConnected == true) {
                    Message_log.append("You are connected. \n");
                }

        }
      }else if (buttontext.equals("Disconnect")){
           sendDisconnect();
           Disconnect();
           button.setText("Connect");
           Name_c.setEditable(true);
           mess_sent.setEditable(false); 
      }

        
    }//GEN-LAST:event_buttonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        switch (mess_sent.getText()) {
            case "Your messages":
               mess_sent.setText("Type your message here");
                mess_sent.requestFocus();
                break;
            case "Client name":
                break;
            case "Input yuor name":
                break;
            default:
              try {
                theWriter.println(username + " : " + mess_sent.getText() + ":" + "Chat");
                theWriter.flush();
            } catch (Exception ex) {
                Message_log.append("You're not connected. \n");
            }
           mess_sent.setText("");
            mess_sent.requestFocus();

        }

        mess_sent.setText("Your messages");
        mess_sent.requestFocus();
    }                                 

    private void MessageKeyPressed(java.awt.event.KeyEvent evt) {                                   
        if (mess_sent.getText().equals("Your messages"))
            mess_sent.setText("");
    }                                  

    private void client_NameKeyPressed(java.awt.event.KeyEvent evt) {                                       
        // TODO add your handling code here:
        if (Name_c.getText().equals("Client name"))
            Name_c.setText("");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void mess_sentKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mess_sentKeyPressed
        if (mess_sent.getText().equals("Your messages"))
            mess_sent.setText("");
    }//GEN-LAST:event_mess_sentKeyPressed

    private void mess_sentKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mess_sentKeyReleased
       switch (mess_sent.getText()) {
            case "":
                mess_sent.setText("Your messages");
                break;
            default:
                String name = mess_sent.getText();
                String result = name.substring(0, 1).toUpperCase() + name.substring(1);
                mess_sent.setText(result);
        }
    }//GEN-LAST:event_mess_sentKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(User_Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(User_Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(User_Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(User_Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new User_Client().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea Message_log;
    private javax.swing.JTextField Name_c;
    private javax.swing.JButton button;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField mess_sent;
    // End of variables declaration//GEN-END:variables
public class Message implements Runnable {

        @Override
        public void run() {
            String[] data;
            String stream;

            try {
                while (!(stream = theReader.readLine()).equals(null)) {
                    data = stream.split(":");

                    switch (data[2]) {
                        case "Chat":
                            Message_log.append(data[0] + ":" + data[1] + "\n");
                            Message_log.setCaretPosition(Message_log.getDocument().getLength());
                            break;
                        case "Connnect":
                            Message_log.removeAll();
                            userAdd(data[0]);
                            break;
                        case "Disconnect":
                            userRemove(data[0]);
                            break;
                        case "Done":
                            writeUsers();
                            users.clear();
                    }
                }
            } catch (Exception ex) {
            }
        }
    }

}
